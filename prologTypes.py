import sys

structs = {}
unions = {}
enums = {'bool': ['true', 'false']}
with open("types.h") as header:
    curType = None
    curRecords = []
    nonempty = False
    curParse = None
    enum = False
    noquote = False
    for line in header:
        sline = line.strip()
        if sline.startswith("struct"):
            if sline.endswith('{'):
                sline = sline[:-1]
            curType = sline.split()[1].lower()
            curRecords = []
            curParse = structs
        elif sline.startswith("union"):
            if sline.endswith('{'):
                sline = sline[:-1]
            curType = sline.split()[1].lower()
            curRecords = []
            curParse = unions
        elif sline.startswith("enum"):
            if sline.endswith('{'):
                sline = sline[:-1]
            curType = sline.split()[1].lower()
            curRecords = []
            enum = True
            curParse = enums
        elif sline.startswith("//!"):
            if enum:
                curRecords.append('--'+sline[3:].strip())
            else:
                curRecords.append(('--', sline[3:].strip()))
        elif sline == '};':
            curParse[curType] = curRecords
            curParse = None
            enum = False
            curRecords = None
            curType = None
            nonempty = False
            noquote=False
        elif sline == '// Nonempty':
            nonempty = True
        elif sline == '// No quote':
            noquote=True
        elif sline == '{' or sline == '' or sline.startswith('//'):
            continue
        elif enum:
            name = sline.split(';')[0]
            curRecords.append(name+'[]')
        else:
            tType, name = sline.split()[:2]
            if nonempty:
                if tType.endswith('[]'):
                    tType = tType[:-2]+'[ne]'
                nonempty = False
            curRecords.append((name[:-1], tType.lower()))

sasp = '_'
outputFile = 'types.pl'
if sasp == '_':
    outputFile = "types.lp"
with open(outputFile, 'w') as f:
    sys.stdout = f

    print('% AutoGenerated File from types.h do not hand edit\n')

    print('% General')
    print(sasp+'any_type(_).')
    print(sasp+'any_list([]).')
    print(sasp+'any_list([_|_]).')
    print(sasp+'any_list_ne([_|_]).')
    print('\n')

    print('% Structs')
    for n, ts in structs.items():
        res = sasp+n+'('
        for rn, t in ts:
            if rn=='--':
                continue
            res += rn + ','
        res = res[:-1]+') :-'
        ver = res[:-3]
        ver = sasp+n+'_type(X) :- X='+ver+', '+ver + '.\n'
        res = ver + res
        for rn, t in ts:
            if t == 'any':
                continue
            if rn == '--':
                res += '\n    '+sasp+t+','
            elif t.endswith('[]'):
                t = t[:-2]
                res += '\n    '+sasp+t+'_list('+rn+'),'
            elif t.endswith('[ne]'):
                t = t[:-4]
                res += '\n    '+sasp+t+'_list_ne('+rn+'),'
            else:
                res += '\n    '+sasp+t+'_type('+rn +'),'
        res = res[:-1] + '.\n'
        res += sasp+n+'_list([]).\n'+sasp+n+'_list(L) :- '+sasp+n+'_list_ne(L).\n'
        res += sasp+n+'_list_ne([H]) :- ' +sasp+n+'_type(H).\n'+sasp+n+'_list_ne([H|T]) :- '+sasp+n+'_type(H), '+sasp+n+'_list_ne(T).\n'
        print(res)

    print('\n% Unions')
    for n, ts in unions.items():
        res = ''
        for rn, t in ts:
            res += sasp+n+'_type('+rn+') :- ' + sasp + t + '_type('+rn+').\n'
        res += sasp+n+'_list([]).\n'+sasp+n+'_list(L) :- '+sasp+n+'_list_ne(L).\n'
        res += sasp+n+'_list_ne([H]) :- ' +sasp+n+'_type(H).\n'+sasp+n+'_list_ne([H|T]) :- '+sasp+n+'_type(H), '+sasp+n+'_list_ne(T).\n'
        print(res)

    print('\n% Enums')
    for n, ts in enums.items():
        res = ''
        for rn in ts:
            if rn.endswith('[]'):
                res += sasp+n+"_type("+rn[:-2]+").\n"
            else:
                res += sasp+n+"_type('"+rn+"').\n"
        res += sasp+n+'_list([]).\n'+sasp+n+'_list(L) :- '+sasp+n+'_list_ne(L).\n'
        res += sasp+n+'_list_ne([H]) :- ' +sasp+n+'_type(H).\n'+sasp+n+'_list_ne([H|T]) :- '+sasp+n+'_type(H), '+sasp+n+'_list_ne(T).\n'
        print(res)
